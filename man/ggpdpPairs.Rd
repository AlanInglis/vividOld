% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggpdpPairs.R
\name{ggpdpPairs}
\alias{ggpdpPairs}
\title{ggpdpPairs}
\usage{
ggpdpPairs(
  task,
  model,
  parallel = FALSE,
  vars = NULL,
  pal = rev(RColorBrewer::brewer.pal(11, "RdYlBu")),
  fitlims = "pdp",
  gridSize = 10,
  nmax = 500,
  class = 1,
  nIce = 30,
  ...
)
}
\arguments{
\item{task}{Task created from the mlr package, either regression or classification.}

\item{model}{Any machine learning model.}

\item{parallel}{If TRUE then the method is executed in parallel.}

\item{vars}{Specify which variables and their order to plot. Defaults to all predictors.}

\item{pal}{A vector of colors to show predictions, for use with scale_fill_gradientn}

\item{fitlims}{Specifies the fit range for the color map. Options are a numeric vector of length 2,
"pdp" (default), in which cases limits are calculated from the pdp, or "all", when limits are calculated from the points, pdp and ice.
Predictions outside fitlims are squished on the color scale.}

\item{gridSize}{for the pdp/ale plots, defaults to 10.}

\item{nmax}{Maximum number of data rows to consider, for lower diagonal plots, and for calculating pdp/ice}

\item{class}{For a classification model, show the probability of this class. Defaults to 1.}

\item{nIce}{Number of ice curves to be plotted, defaults to 30}

\item{...}{Not currently implemented.}
}
\value{
A ggpairs style plot displaying the partial dependence.
}
\description{
Creates a plot of the partial dependence of each of the variables in ggpairs plot style matrix
}
\examples{

# Run an mlr3 ranger model:
library(mlr3)
library(mlr3learners)
library(MASS)
Boston1 <- Boston[,c(4:6,8,13:14)]
Boston1$chas <- factor(Boston1$chas)
task <- TaskRegr$new(id = "Boston1", backend = Boston1, target = "medv")
learner <- lrn("regr.ranger", importance = "permutation")
fit <- learner$train(task)
ggpdpPairs(task , fit)

Boston2 <- Boston1
Boston2$medv <- ggplot2::cut_interval(Boston2$medv, 3)
levels(Boston2$medv) <- c("lo","mid", "hi")
task <- TaskClassif$new(id = "Boston2", backend = Boston2, target = "medv")
learner <- lrn("classif.ranger", importance = "impurity")
fit <- learner$train(task)
ggpdpPairs(task , fit, class="hi")

}
