% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggpdpPairs.R
\name{ggpdpPairs}
\alias{ggpdpPairs}
\title{ggpdpPairs}
\usage{
ggpdpPairs(
  task,
  model,
  method = "pdp",
  corrVal = FALSE,
  corr = FALSE,
  corrMethod = "p",
  vars = NULL,
  colLow = "#132B43",
  colHigh = "#56B1F7",
  fitlims = NULL,
  gridsize = 10,
  class = 1,
  cardinality = 20,
  ...
)
}
\arguments{
\item{task}{Task created from the mlr package, either regression or classification.}

\item{model}{Any machine learning model.}

\item{method}{"pdp" (default) or "ale"}

\item{corrVal}{If TRUE, then display the correlation coefficient on top of scatterplot.}

\item{corr}{If TRUE then a correlation matrix is displayed in the lower triangle.}

\item{corrMethod}{a character string indicating which correlation coefficient (or covariance) is to be computed.
One of "pearson" (default), "kendall", or "spearman".}

\item{vars}{Variables to plot. Defaults to all predictors}

\item{colLow}{Color to be used for low values}

\item{colHigh}{Color to be used for low values}

\item{fitlims}{If supplied, should be a numeric vector of length 2, specifying the fit range.}

\item{gridsize}{for the pdp/ale plots, defaults to 10}

\item{class}{For a classification model, show the probability of this class. Defaults to 1.}

\item{...}{Not currently implemented}
}
\value{
A ggpairs style plot displaying the partial dependence.
}
\description{
Creates a plot of the partial dependence of each of the variables in ggpairs plot style matrix
}
\examples{

# Run an mlr random forest model:
library(mlr)
library(randomForest)
library(MASS)
Boston1 <- Boston[,c(4:6,8,13:14)]
Boston1$chas <- factor(Boston1$chas)
task  <- makeRegrTask(data = Boston1, target = "medv")
learner <- makeLearner("regr.randomForest")
fit <- train(learner, task)
ggpdpPairs(task , fit)

Boston2 <- Boston1
Boston2$medv <- ggplot2::cut_interval(Boston2$medv, 3)
levels(Boston2$medv) <- c("lo","mid", "hi")
task  <- makeClassifTask(data = Boston2, target = "medv")
learner <- makeLearner("classif.randomForest",predict.type = "prob")
fit <- train(learner, task)
ggpdpPairs(task , fit, class="hi")

}
